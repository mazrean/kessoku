// Code generated by kessoku. DO NOT EDIT.

package main

import (
	"github.com/mazrean/kessoku"
	"golang.org/x/sync/errgroup"
)

func InitializeApp() *App {
	eg := &errgroup.Group{}
	eg.Go(func() error {
		var err error
		databaseService := kessoku.Async(kessoku.Provide(NewDatabaseService)).Fn()()
		for _, ch := range []chan<- struct {
		}{databaseServiceCh} {
			close(ch)
		}
		for _, ch := range []<-chan struct {
		}{databaseServiceCh, cacheServiceCh} {
			select {
			case <-ch:
			case <-ctx.Done:
				return ctx.Err()
			}
		}
		userService := kessoku.Provide(NewUserService).Fn()(databaseService, cacheService)
		for _, ch := range []chan<- struct {
		}{userServiceCh} {
			close(ch)
		}
		for _, ch := range []<-chan struct {
		}{userServiceCh, notificationServiceCh} {
			select {
			case <-ch:
			case <-ctx.Done:
				return ctx.Err()
			}
		}
		app := kessoku.Provide(NewApp).Fn()(userService, notificationService)
		return nil
	})
	eg.Go(func() error {
		var err error
		cacheService := kessoku.Async(kessoku.Provide(NewCacheService)).Fn()()
		for _, ch := range []chan<- struct {
		}{cacheServiceCh} {
			close(ch)
		}
		for _, ch := range []<-chan struct {
		}{messagingServiceCh} {
			select {
			case <-ch:
			case <-ctx.Done:
				return ctx.Err()
			}
		}
		notificationService := kessoku.Provide(NewNotificationService).Fn()(messagingService)
		for _, ch := range []chan<- struct {
		}{notificationServiceCh} {
			close(ch)
		}
		return nil
	})
	messagingService := kessoku.Async(kessoku.Provide(NewMessagingService)).Fn()()
	for _, ch := range []chan<- struct {
	}{messagingServiceCh} {
		close(ch)
	}
	eg.Wait()
	return app
}
