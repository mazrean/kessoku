// Code generated by kessoku. DO NOT EDIT.

package main

import (
	"context"
	"github.com/mazrean/kessoku"
	"golang.org/x/sync/errgroup"
)

func InitializeApp(ctx context.Context) (*App, error) {
	var (
		databaseService       *DatabaseService
		cacheService          *CacheService
		cacheServiceCh        = make(chan struct{})
		messagingService      *MessagingService
		userService           *UserService
		notificationService   *NotificationService
		notificationServiceCh = make(chan struct{})
		app                   *App
	)
	eg, ctx := errgroup.WithContext(ctx)
	eg.Go(func() error {
		cacheService = kessoku.Async(kessoku.Provide(NewCacheService)).Fn()()
		close(cacheServiceCh)
		return nil
	})
	eg.Go(func() error {
		messagingService = kessoku.Async(kessoku.Provide(NewMessagingService)).Fn()()
		notificationService = kessoku.Provide(NewNotificationService).Fn()(messagingService)
		close(notificationServiceCh)
		return nil
	})
	var err error
	databaseService, err = kessoku.Async(kessoku.Provide(NewDatabaseService)).Fn()()
	if err != nil {
		var zero *App
		return zero, err
	}
	select {
	case <-cacheServiceCh:
	case <-ctx.Done():
		var zero *App
		return zero, ctx.Err()
	}
	userService = kessoku.Provide(NewUserService).Fn()(databaseService, cacheService)
	select {
	case <-notificationServiceCh:
	case <-ctx.Done():
		var zero *App
		return zero, ctx.Err()
	}
	app = kessoku.Provide(NewApp).Fn()(userService, notificationService)
	if err := eg.Wait(); err != nil {
		return nil, err
	}
	return app, nil
}
