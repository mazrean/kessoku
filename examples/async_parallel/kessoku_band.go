// Code generated by kessoku. DO NOT EDIT.

package main

import (
	"context"
	"github.com/mazrean/kessoku"
	"golang.org/x/sync/errgroup"
)

func InitializeApp(ctx context.Context) (*App, error) {
	var (
		databaseService       *DatabaseService
		cacheService          *CacheService
		cacheServiceCh        = make(chan struct{})
		messagingService      *MessagingService
		messagingServiceCh    = make(chan struct{})
		userService           *UserService
		notificationService   *NotificationService
		notificationServiceCh = make(chan struct{})
		app                   *App
	)
	eg, ctx := errgroup.WithContext(ctx)
	eg.Go(func() error {
		var err error
		databaseService, err = kessoku.Async(kessoku.Provide(NewDatabaseService)).Fn()()
		if err != nil {
			return err
		}
		select {
		case <-cacheServiceCh:
		case <-ctx.Done():
			return ctx.Err()
		}
		userService = kessoku.Provide(NewUserService).Fn()(databaseService, cacheService)
		select {
		case <-notificationServiceCh:
		case <-ctx.Done():
			return ctx.Err()
		}
		app = kessoku.Provide(NewApp).Fn()(userService, notificationService)
		return nil
	})
	eg.Go(func() error {
		cacheService = kessoku.Async(kessoku.Provide(NewCacheService)).Fn()()
		close(cacheServiceCh)
		select {
		case <-messagingServiceCh:
		case <-ctx.Done():
			return ctx.Err()
		}
		notificationService = kessoku.Provide(NewNotificationService).Fn()(messagingService)
		close(notificationServiceCh)
		return nil
	})
	eg.Go(func() error {
		messagingService = kessoku.Async(kessoku.Provide(NewMessagingService)).Fn()()
		close(messagingServiceCh)
		return nil
	})
	if err := eg.Wait(); err != nil {
		return nil, err
	}
	return app, nil
}
