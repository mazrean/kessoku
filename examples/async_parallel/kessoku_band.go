// Code generated by kessoku. DO NOT EDIT.

package main

import (
	"github.com/mazrean/kessoku"
	"golang.org/x/sync/errgroup"
)

func InitializeApp() *App {
	var (
		databaseService       *DatabaseService
		databaseServiceCh     = make(chan struct{})
		cacheService          *CacheService
		cacheServiceCh        = make(chan struct{})
		messagingService      *MessagingService
		messagingServiceCh    = make(chan struct{})
		userService           *UserService
		userServiceCh         = make(chan struct{})
		notificationService   *NotificationService
		notificationServiceCh = make(chan struct{})
		app                   *App
	)
	eg := &errgroup.Group{}
	eg.Go(func() error {
		databaseService = kessoku.Async(kessoku.Provide(NewDatabaseService)).Fn()()
		close(databaseServiceCh)
		for _, ch := range []<-chan struct{}{databaseServiceCh, cacheServiceCh} {
			<-ch
		}
		userService = kessoku.Provide(NewUserService).Fn()(databaseService, cacheService)
		close(userServiceCh)
		for _, ch := range []<-chan struct{}{userServiceCh, notificationServiceCh} {
			<-ch
		}
		app = kessoku.Provide(NewApp).Fn()(userService, notificationService)
		return nil
	})
	eg.Go(func() error {
		cacheService = kessoku.Async(kessoku.Provide(NewCacheService)).Fn()()
		close(cacheServiceCh)
		<-messagingServiceCh
		notificationService = kessoku.Provide(NewNotificationService).Fn()(messagingService)
		close(notificationServiceCh)
		return nil
	})
	messagingService = kessoku.Async(kessoku.Provide(NewMessagingService)).Fn()()
	close(messagingServiceCh)
	eg.Wait()
	return app
}
