// Code generated by kessoku. DO NOT EDIT.

package main

import (
	"context"
	"github.com/mazrean/kessoku"
	"golang.org/x/sync/errgroup"
)

func InitializeComplexApp(ctx context.Context) *App {
	var (
		config              *Config
		configCh            = make(chan struct{})
		messagingService    *MessagingService
		databaseService     *DatabaseService
		cacheService        *CacheService
		userService         *UserService
		userServiceCh       = make(chan struct{})
		sessionService      *SessionService
		sessionServiceCh    = make(chan struct{})
		notificationService *NotificationService
		app                 *App
	)
	eg, ctx := errgroup.WithContext(ctx)
	config = kessoku.Provide(NewConfig).Fn()()
	close(configCh)
	eg.Go(func() error {
		select {
		case <-configCh:
		case <-ctx.Done():
			return ctx.Err()
		}
		databaseService = kessoku.Async(kessoku.Provide(NewDatabaseService)).Fn()(config)
		userService = kessoku.Async(kessoku.Provide(NewUserService)).Fn()(databaseService)
		close(userServiceCh)
		return nil
	})
	eg.Go(func() error {
		select {
		case <-configCh:
		case <-ctx.Done():
			return ctx.Err()
		}
		cacheService = kessoku.Async(kessoku.Provide(NewCacheService)).Fn()(config)
		sessionService = kessoku.Async(kessoku.Provide(NewSessionService)).Fn()(cacheService)
		close(sessionServiceCh)
		return nil
	})
	messagingService = kessoku.Async(kessoku.Provide(NewMessagingService)).Fn()(config)
	for _, ch := range []<-chan struct{}{userServiceCh, sessionServiceCh} {
		<-ch
	}
	notificationService = kessoku.Async(kessoku.Provide(NewNotificationService)).Fn()(userService, sessionService, messagingService)
	app = kessoku.Provide(NewComplexApp).Fn()(notificationService)
	eg.Wait()
	return app
}
