name: CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    environment: Test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.out
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run custom linter
        run: |
          set -o pipefail
          go tool tools lint ./... 2>&1 | tee lint-output.txt || {
            echo "::group::Linting Issues"
            while IFS= read -r line; do
              if [[ "$line" =~ ^([^:]+):([0-9]+):([0-9]+):(.*)$ ]]; then
                file="${BASH_REMATCH[1]}"
                line_num="${BASH_REMATCH[2]}"
                col="${BASH_REMATCH[3]}"
                message="${BASH_REMATCH[4]}"
                echo "::error file=$file,line=$line_num,col=$col::$message"
              elif [[ "$line" =~ ^([^:]+):([0-9]+):(.*)$ ]]; then
                file="${BASH_REMATCH[1]}"
                line_num="${BASH_REMATCH[2]}"
                message="${BASH_REMATCH[3]}"
                echo "::error file=$file,line=$line_num::$message"
              else
                echo "::error::$line"
              fi
            done < lint-output.txt
            echo "::endgroup::"
            exit 1
          }

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Build with GoReleaser (snapshot)
        run: go tool goreleaser build --snapshot --clean

      - name: Test binary execution
        run: ./dist/kessoku_linux_amd64_v1/kessoku --version

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kessoku-binaries
          path: dist/
          retention-days: 30

  api-compatibility:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Check API compatibility
        run: |
          echo "üîç Checking API compatibility..."
          
          # Get the module path
          MODULE_PATH=$(go list -m)
          echo "Module path: $MODULE_PATH"
          
          # Get base commit for comparison (target branch)
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          echo "Base SHA: $BASE_SHA"
          
          # Check if base version has any public API
          git checkout "$BASE_SHA" 2>/dev/null || {
            echo "‚ÑπÔ∏è Could not checkout base SHA, skipping API compatibility check"
            exit 0
          }
          
          if ! find . -name "*.go" -not -path "./internal/*" -not -path "./*_test.go" -not -path "./tools/*" -not -path "./examples/*" | head -1 | grep -q .; then
            echo "‚ÑπÔ∏è No public API found in base version, skipping compatibility check"
            git checkout "${{ github.sha }}"
            exit 0
          fi
          
          git checkout "${{ github.sha }}"
          
          # Run API compatibility check
          echo "Comparing: ${MODULE_PATH}@${BASE_SHA} vs ${MODULE_PATH}"
          OUTPUT=$(go tool tools apicompat "${MODULE_PATH}@${BASE_SHA}" "${MODULE_PATH}" 2>&1)
          
          if [ -n "$OUTPUT" ]; then
            echo "‚ùå Breaking API changes detected:"
            echo "$OUTPUT"
            echo "::error::Breaking API changes detected. See output above for details."
            exit 1
          else
            echo "‚úÖ No breaking API changes detected"
          fi
