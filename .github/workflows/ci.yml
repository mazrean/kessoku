name: CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    environment: Test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.out
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run custom linter
        run: |
          set -o pipefail
          go tool tools lint ./... 2>&1 | tee lint-output.txt || {
            echo "::group::Linting Issues"
            while IFS= read -r line; do
              if [[ "$line" =~ ^([^:]+):([0-9]+):([0-9]+):(.*)$ ]]; then
                file="${BASH_REMATCH[1]}"
                line_num="${BASH_REMATCH[2]}"
                col="${BASH_REMATCH[3]}"
                message="${BASH_REMATCH[4]}"
                echo "::error file=$file,line=$line_num,col=$col::$message"
              elif [[ "$line" =~ ^([^:]+):([0-9]+):(.*)$ ]]; then
                file="${BASH_REMATCH[1]}"
                line_num="${BASH_REMATCH[2]}"
                message="${BASH_REMATCH[3]}"
                echo "::error file=$file,line=$line_num::$message"
              else
                echo "::error::$line"
              fi
            done < lint-output.txt
            echo "::endgroup::"
            exit 1
          }

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Build with GoReleaser (snapshot)
        run: go tool goreleaser build --snapshot --clean

      - name: Test binary execution
        run: ./dist/kessoku_linux_amd64_v1/kessoku --version

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kessoku-binaries
          path: dist/
          retention-days: 30

  api-compatibility:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Check API compatibility
        run: |
          MODULE_PATH="github.com/mazrean/kessoku"
          # Run API compatibility check and capture output
          if OUTPUT=$(go tool tools apicompat "${MODULE_PATH}@latest" "${MODULE_PATH}" 2>&1); then
            echo "No breaking API changes detected"
          else
            echo "$OUTPUT"
            
            if [ -n "${{ github.event.pull_request.number }}" ]; then
              # Comment on PR with the results (or update existing comment)
              gh pr comment ${{ github.event.pull_request.number }} --edit-last --create-if-none --body "## ⚠️ API Compatibility Check Failed
            
            Breaking changes detected in the public API:
            
            \`\`\`
            $OUTPUT
            \`\`\`
            
            Please review these changes and consider:
            - Whether these breaking changes are intentional
            - Updating the major version if breaking changes are required
            - Providing migration guidance for users"
            else
              # Output to job summary for non-PR events
              cat >> $GITHUB_STEP_SUMMARY << EOF
            ## ⚠️ API Compatibility Check Failed
            
            Breaking changes detected in the public API:
            
            \`\`\`
            $OUTPUT
            \`\`\`
            
            Please review these changes and consider:
            - Whether these breaking changes are intentional
            - Updating the major version if breaking changes are required
            - Providing migration guidance for users
            EOF
            fi
            
            exit 1
          fi
        env:
          GH_TOKEN: ${{ github.token }}
