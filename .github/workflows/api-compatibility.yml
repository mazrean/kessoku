name: API Compatibility Check

on:
  pull_request:
    branches: [main]
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'
  push:
    branches: [main]
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'

permissions:
  contents: read
  pull-requests: write

jobs:
  api-compatibility:
    name: Check API Compatibility
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout current code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Get base version for comparison
        id: base-version
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PRs, compare against the target branch
            echo "version=${{ github.event.pull_request.base.sha }}" >> $GITHUB_OUTPUT
          else
            # For pushes to main, compare against the previous commit
            echo "version=HEAD~1" >> $GITHUB_OUTPUT
          fi

      - name: Check if base version has public API
        id: check-base
        run: |
          # Check if the base version has any public Go files
          git checkout ${{ steps.base-version.outputs.version }} 2>/dev/null || exit 0
          if find . -name "*.go" -not -path "./internal/*" -not -path "./*_test.go" -not -path "./tools/*" -not -path "./examples/*" | head -1 | grep -q .; then
            echo "has-api=true" >> $GITHUB_OUTPUT
          else
            echo "has-api=false" >> $GITHUB_OUTPUT
          fi
          git checkout ${{ github.sha }}

      - name: Run API compatibility check
        if: steps.check-base.outputs.has-api == 'true'
        run: |
          echo "üîç Checking API compatibility..."
          echo "Base version: ${{ steps.base-version.outputs.version }}"
          echo "Current version: ${{ github.sha }}"
          
          # Build the apicompat tool
          cd tools
          go build -o ../bin/apicompat .
          cd ..
          
          # Run the API compatibility check
          ./bin/apicompat apicompat ${{ steps.base-version.outputs.version }}

      - name: Comment on PR (if compatibility check fails)
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `## ‚ö†Ô∏è API Compatibility Check Failed
            
            This pull request introduces breaking changes to the public API.
            
            ### What this means:
            - Public functions, types, or methods have been removed or their signatures changed
            - This could break existing code that depends on this library
            
            ### Next steps:
            1. Review the changes above to understand what broke
            2. Consider if these breaking changes are necessary
            3. If breaking changes are intended:
               - Update the major version (semantic versioning)
               - Document the breaking changes in the changelog
               - Consider providing a migration guide
            
            ### To bypass this check:
            If you're certain these breaking changes are acceptable, you can:
            - Update the major version in go.mod
            - Add a comment explaining why the breaking change is necessary
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Skip API check (no public API in base)
        if: steps.check-base.outputs.has-api == 'false'
        run: |
          echo "‚ÑπÔ∏è Skipping API compatibility check - no public API found in base version"
          echo "This is normal for new projects or major version changes."